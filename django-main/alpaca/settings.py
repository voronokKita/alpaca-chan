"""
Django settings for Alpaca-chan project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/

As a security measure, Django will exclude from debug pages any setting
whose name partial includes any of the following:
'API', 'KEY', 'PASS', 'SECRET', 'SIGNATURE', 'TOKEN'
"""
import secrets

from .presets import (
    DEBUG, BASE_DIR, PROJECT_ROOT_DIR, PROJECT_APPS_DIR,
    ALL_PROJECT_APPS, PROJECT_MAIN_APPS
)


# Deployment checklist
# https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# <development settings>
# If DEBUG is False, you also need to properly set the ALLOWED_HOSTS setting
ALLOWED_HOSTS = ['example.com', 'test.com', 'localhost', '127.0.0.1', '[::1]']

INTERNAL_IPS = ['127.0.0.1']

# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/4.0/ref/settings/#secret-key
key = BASE_DIR / '.SECRET_KEY'
if key.exists():
    with open(key, 'r') as f: SECRET_KEY = f.read().strip()
else:
    print("WARNING — can't find SECRET_KEY — a random token will be generated.")
    SECRET_KEY = secrets.token_urlsafe(49)
del key
# </development settings>


# <application definition>
# https://docs.djangoproject.com/en/4.0/ref/applications/
ROOT_URLCONF = 'alpaca.urls'

WSGI_APPLICATION = 'alpaca.wsgi.application'

""" To install or change an app:
1. Append the [app].apps.ConfigClass to the INSTALLED_APPS.
2. Append the app [app].urls to the alpaca.urls.
3. Configure the app in the alpaca.presets.
3.1. Set up the app db router if needed.
"""
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',

    'core.apps.CoreAppConfig',
    'accounts.apps.AccountsConfig',
    'polls.apps.PollsConfig',
    'encyclopedia.apps.EncyclopediaConfig',
    'auctions.apps.AuctionsConfig',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
LOGIN_URL = 'accounts/login'

# https://docs.djangoproject.com/en/4.0/howto/static-files/
# https://docs.djangoproject.com/en/4.0/ref/settings/#static-files
# https://docs.djangoproject.com/en/4.0/howto/static-files/deployment/
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static_for_deployment'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# https://docs.djangoproject.com/en/4.0/topics/files/
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# https://django.fun/docs/django/ru/4.0/topics/http/sessions/
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_AGE = 86400
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = True
# </application definition>


# <database>
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'django-main.sqlite3',
        'TIME_ZONE': 'Europe/Moscow',
        'TEST': {
            'NAME': None,
            'DEPENDENCIES': [],
        },
    },
}
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# https://docs.djangoproject.com/en/4.0/topics/db/multi-db/#topics-db-multi-db-routing
DATABASE_ROUTERS = ['alpaca.db_router.DefaultRouter']

for app in ALL_PROJECT_APPS:
    if ALL_PROJECT_APPS[app]['db'] is not False:
        app_db = ALL_PROJECT_APPS[app]['db']
        dict_ = {
            app_db['name']: {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': ALL_PROJECT_APPS[app]['app_dir'] / f'{app}.sqlite3',
                'TIME_ZONE': 'Europe/Moscow',
                'TEST': {
                    'NAME': None,
                    'DEPENDENCIES': app_db['dependencies']
                },
            },
        }
        DATABASES.update(dict_)
        DATABASE_ROUTERS.append(f"{app}.db_router.{app_db['router_class']}")
# </database>


# <password>
# https://docs.djangoproject.com/en/4.0/topics/auth/passwords/#password-validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    # {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    # {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]
# </password>


# <sessions>
# https://docs.djangoproject.com/en/4.0/ref/settings/#sessions
# </sessions>


# <internationalization>
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_COOKIE_SECURE = True

LANGUAGE_CODE = 'en-us'
USE_L10N = False

DEFAULT_CHARSET = 'utf-8'

TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_TZ = True

DATE_FORMAT = 'Y.n.j'
TIME_FORMAT = 'G:i:s'
DATETIME_FORMAT = 'Y.n.j G:i:s'
SHORT_DATE_FORMAT = 'Y.n.j P'
# </internationalization>


# <logging>
from .logger_config import LOGGING
# </logging>


# <misc>
APPEND_SLASH = False
CSRF_COOKIE_SECURE = True
# </misc>
